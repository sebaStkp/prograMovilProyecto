<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/ucb/perritos/MainActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/ucb/perritos/MainActivity.kt" />
              <option name="originalContent" value="package com.ucb.perritos&#10;&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.activity.viewModels&#10;import androidx.navigation.compose.rememberNavController&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.WindowInsets&#10;import androidx.compose.foundation.layout.navigationBarsPadding&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.unit.dp&#10;import androidx.navigation.NavHostController&#10;import com.ucb.perritos.navigation.AppNavigation&#10;import com.ucb.perritos.navigation.NavigationViewModel&#10;import com.ucb.perritos.features.menu.presentation.MenuScreen&#10;&#10;&#10;class MainActivity : ComponentActivity() {&#10;    private val navigationViewModel: NavigationViewModel by viewModels()&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;&#10;        setContent {&#10;            val navController: NavHostController = rememberNavController()&#10;&#10;            Scaffold(&#10;                bottomBar = {&#10;                    MenuScreen(&#10;                        onShieldClick = { /* TODO */ },&#10;                        onCalendarClick = { /* TODO */ },&#10;                        onPawClick = { navController.navigate(&quot;perfilPerro&quot;) },&#10;                        onProfileClick = { navController.navigate(&quot;perfilDueno&quot;) }&#10;                    )&#10;                },&#10;                content = { paddingValues -&gt;&#10;                    Box(&#10;                        modifier = Modifier&#10;                            .padding(paddingValues)&#10;                            .navigationBarsPadding()&#10;                    )&#10;                    {&#10;                        AppNavigation(navigationViewModel, navController)&#10;                    }&#10;                },&#10;                contentWindowInsets = WindowInsets(bottom = 0.dp)&#10;            )&#10;        }&#10;&#10;    }&#10;}&#10;&#10;&#10;&#10;&#10;//class MainActivity : ComponentActivity() {&#10;//    private val navigationViewModel: NavigationViewModel by viewModels()&#10;//    private var currentIntent: Intent? = null&#10;//&#10;//    override fun onCreate(savedInstanceState: Bundle?) {&#10;//        super.onCreate(savedInstanceState)&#10;//        currentIntent = intent&#10;//&#10;//        enableEdgeToEdge()&#10;//        setContent {&#10;//            LaunchedEffect(Unit) {&#10;//                Log.d(&quot;MainActivity&quot;, &quot;onCreate - Procesando intent inicial&quot;)&#10;//                navigationViewModel.handleDeepLink(currentIntent)&#10;//            }&#10;//&#10;//            LaunchedEffect(Unit) {&#10;//                snapshotFlow { currentIntent }&#10;//                    .distinctUntilChanged()&#10;//                    .collect { intent -&gt;&#10;//                        Log.d(&quot;MainActivity&quot;, &quot;Nuevo intent recibido: ${intent?.action}&quot;)&#10;//                        navigationViewModel.handleDeepLink(intent)&#10;//                    }&#10;//            }&#10;//&#10;//            AppNavigation(navigationViewModel)&#10;//        }&#10;//    }&#10;//&#10;//    override fun onNewIntent(intent: Intent) {&#10;//        super.onNewIntent(intent)&#10;//        Log.d(&quot;MainActivity&quot;, &quot;onNewIntent llamado&quot;)&#10;//&#10;//        this.intent = intent&#10;//        currentIntent = intent&#10;//&#10;//        navigationViewModel.handleDeepLink(intent)&#10;//    }&#10;//}&#10;" />
              <option name="updatedContent" value="package com.ucb.perritos&#10;&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.activity.viewModels&#10;import androidx.navigation.compose.rememberNavController&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.WindowInsets&#10;import androidx.compose.foundation.layout.navigationBarsPadding&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.unit.dp&#10;import androidx.navigation.NavHostController&#10;import androidx.navigation.compose.currentBackStackEntryAsState&#10;import com.ucb.perritos.navigation.AppNavigation&#10;import com.ucb.perritos.navigation.NavigationViewModel&#10;import com.ucb.perritos.features.menu.presentation.MenuScreen&#10;&#10;&#10;class MainActivity : ComponentActivity() {&#10;    private val navigationViewModel: NavigationViewModel by viewModels()&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;&#10;        setContent {&#10;            val navController: NavHostController = rememberNavController()&#10;&#10;            // Obtener ruta actual para mostrar/ocultar el bottom bar&#10;            val navBackStackEntry by navController.currentBackStackEntryAsState()&#10;            val currentRoute = navBackStackEntry?.destination?.route&#10;&#10;            val showBottomBar = currentRoute in listOf(&#10;                &quot;${&quot;menu&quot;}&quot;, // Screen.Menu.route&#10;                &quot;${&quot;perfilPerro&quot;}&quot;,&#10;                &quot;${&quot;perfilDueno&quot;}&quot;&#10;            )&#10;&#10;            Scaffold(&#10;                bottomBar = {&#10;                    if (showBottomBar) {&#10;                        MenuScreen(&#10;                            onShieldClick = { /* TODO */ },&#10;                            onCalendarClick = { /* TODO */ },&#10;                            onPawClick = { navController.navigate(&quot;perfilPerro&quot;) },&#10;                            onProfileClick = { navController.navigate(&quot;perfilDueno&quot;) }&#10;                        )&#10;                    }&#10;                },&#10;                content = { paddingValues -&gt;&#10;                    Box(&#10;                        modifier = Modifier&#10;                            .padding(paddingValues)&#10;                            .navigationBarsPadding()&#10;                    )&#10;                    {&#10;                        AppNavigation(navigationViewModel, navController)&#10;                    }&#10;                },&#10;                contentWindowInsets = WindowInsets(bottom = 0.dp)&#10;            )&#10;        }&#10;&#10;    }&#10;}&#10;&#10;&#10;&#10;&#10;//class MainActivity : ComponentActivity() {&#10;//    private val navigationViewModel: NavigationViewModel by viewModels()&#10;//    private var currentIntent: Intent? = null&#10;//&#10;//    override fun onCreate(savedInstanceState: Bundle?) {&#10;//        super.onCreate(savedInstanceState)&#10;//        currentIntent = intent&#10;//&#10;//        enableEdgeToEdge()&#10;//        setContent {&#10;//            LaunchedEffect(Unit) {&#10;//                Log.d(&quot;MainActivity&quot;, &quot;onCreate - Procesando intent inicial&quot;)&#10;//                navigationViewModel.handleDeepLink(currentIntent)&#10;//            }&#10;//&#10;//            LaunchedEffect(Unit) {&#10;//                snapshotFlow { currentIntent }&#10;//                    .distinctUntilChanged()&#10;//                    .collect { intent -&gt;&#10;//                        Log.d(&quot;MainActivity&quot;, &quot;Nuevo intent recibido: ${intent?.action}&quot;)&#10;//                        navigationViewModel.handleDeepLink(intent)&#10;//                    }&#10;//            }&#10;//&#10;//            AppNavigation(navigationViewModel)&#10;//        }&#10;//    }&#10;//&#10;//    override fun onNewIntent(intent: Intent) {&#10;//        super.onNewIntent(intent)&#10;//        Log.d(&quot;MainActivity&quot;, &quot;onNewIntent llamado&quot;)&#10;//&#10;//        this.intent = intent&#10;//        currentIntent = intent&#10;//&#10;//        navigationViewModel.handleDeepLink(intent)&#10;//    }&#10;//}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/ucb/perritos/features/perfildueno/data/repository/PerfilDuenoRepositoryImpl.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/ucb/perritos/features/perfildueno/data/repository/PerfilDuenoRepositoryImpl.kt" />
              <option name="originalContent" value="package com.ucb.perritos.features.perfildueno.data.repository&#10;&#10;import com.ucb.perritos.features.perfildueno.data.datasource.PerfilDuenoLocalDataSource&#10;import com.ucb.perritos.features.perfildueno.data.mapper.PerfilDuenoMapper&#10;import com.ucb.perritos.features.perfildueno.domain.model.PerfilDuenoModel&#10;import com.ucb.perritos.features.perfildueno.domain.repository.IPerfilDuenoRepository&#10;&#10;class PerfilDuenoRepositoryImpl(&#10;    private val local: PerfilDuenoLocalDataSource,&#10;    private val mapper: PerfilDuenoMapper&#10;) : IPerfilDuenoRepository {&#10;&#10;    override suspend fun obtenerPerfil(): PerfilDuenoModel? {&#10;        return try {&#10;            val entity = local.obtenerPerfil()&#10;            mapper.entityToModel(entity)&#10;        } catch (e: Exception) {&#10;            null&#10;        }&#10;    }&#10;&#10;    override suspend fun actualizarPerfil(perfil: PerfilDuenoModel) {&#10;        // Implementación: guarda/actualiza el perfil localmente&#10;        try {&#10;            local.guardarPerfil(mapper.modelToEntity(perfil))&#10;        } catch (e: Exception) {&#10;            // Ignorar por ahora o propagar si se desea&#10;        }&#10;    }&#10;&#10;    override suspend fun eliminarCuenta() {&#10;        // stub&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.ucb.perritos.features.perfildueno.data.repository&#10;&#10;import com.ucb.perritos.features.perfildueno.data.datasource.PerfilDuenoLocalDataSource&#10;import com.ucb.perritos.features.perfildueno.data.mapper.PerfilDuenoMapper&#10;import com.ucb.perritos.features.perfildueno.domain.model.PerfilDuenoModel&#10;import com.ucb.perritos.features.perfildueno.domain.repository.IPerfilDuenoRepository&#10;&#10;class PerfilDuenoRepositoryImpl(&#10;    private val local: PerfilDuenoLocalDataSource,&#10;    private val mapper: PerfilDuenoMapper&#10;) : IPerfilDuenoRepository {&#10;&#10;    override suspend fun obtenerPerfil(): PerfilDuenoModel? {&#10;        return try {&#10;            val entity = local.obtenerPerfil()&#10;            mapper.entityToModel(entity)&#10;        } catch (e: Exception) {&#10;            null&#10;        }&#10;    }&#10;&#10;    override suspend fun actualizarPerfil(perfil: PerfilDuenoModel) {&#10;        // Implementación: guarda/actualiza el perfil localmente&#10;        try {&#10;            local.guardarPerfil(mapper.modelToEntity(perfil))&#10;        } catch (e: Exception) {&#10;            // Ignorar por ahora o propagar si se desea&#10;        }&#10;    }&#10;&#10;    override suspend fun eliminarCuenta() {&#10;        try {&#10;            local.eliminarPerfil()&#10;        } catch (_: Exception) {&#10;            // ignore&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/ucb/perritos/features/perfildueno/di/PerfilDuenoModule.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/ucb/perritos/features/perfildueno/di/PerfilDuenoModule.kt" />
              <option name="originalContent" value="package com.ucb.perritos.features.perfildueno.di&#10;&#10;import android.content.Context&#10;import com.ucb.perritos.appRoomDataBase.AppRoomDataBase&#10;import com.ucb.perritos.features.perfildueno.data.database.InMemoryPerfilDuenoDao&#10;import com.ucb.perritos.features.perfildueno.data.datasource.PerfilDuenoLocalDataSource&#10;import com.ucb.perritos.features.perfildueno.data.mapper.PerfilDuenoMapper&#10;import com.ucb.perritos.features.perfildueno.data.repository.PerfilDuenoRepository&#10;import com.ucb.perritos.features.perfildueno.domain.usecase.ObtenerPerfilDuenoUseCase&#10;&#10;/**&#10; * Factory simple que devuelve objetos del feature. Si hay una BD disponible, utiliza el DAO de Room;&#10; * en caso contrario, usa una implementación en memoria.&#10; */&#10;object PerfilDuenoModule {&#10;&#10;    fun provideRepository(context: Context?): PerfilDuenoRepository {&#10;        val dao = if (context != null) {&#10;            try {&#10;                val db = AppRoomDataBase.getDatabase(context)&#10;                // Si la DB no expone perfilDuenoDao (por alguna razón), caemos al InMemory&#10;                db.perfilDuenoDao()&#10;            } catch (e: Exception) {&#10;                InMemoryPerfilDuenoDao()&#10;            }&#10;        } else {&#10;            InMemoryPerfilDuenoDao()&#10;        }&#10;&#10;        val local = PerfilDuenoLocalDataSource(dao)&#10;        val mapper = PerfilDuenoMapper()&#10;        return PerfilDuenoRepository(local, mapper)&#10;    }&#10;&#10;    fun provideObtenerPerfilUseCase(context: Context?) = ObtenerPerfilDuenoUseCase(provideRepository(context))&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package com.ucb.perritos.features.perfildueno.di&#10;&#10;import android.content.Context&#10;import com.ucb.perritos.appRoomDataBase.AppRoomDataBase&#10;import com.ucb.perritos.features.perfildueno.data.database.InMemoryPerfilDuenoDao&#10;import com.ucb.perritos.features.perfildueno.data.datasource.PerfilDuenoLocalDataSource&#10;import com.ucb.perritos.features.perfildueno.data.mapper.PerfilDuenoMapper&#10;import com.ucb.perritos.features.perfildueno.data.repository.PerfilDuenoRepository&#10;import com.ucb.perritos.features.perfildueno.domain.usecase.ObtenerPerfilDuenoUseCase&#10;import com.ucb.perritos.features.perfildueno.domain.usecase.EliminarCuentaUseCase&#10;&#10;/**&#10; * Factory simple que devuelve objetos del feature. Si hay una BD disponible, utiliza el DAO de Room;&#10; * en caso contrario, usa una implementación en memoria.&#10; */&#10;object PerfilDuenoModule {&#10;&#10;    fun provideRepository(context: Context?): PerfilDuenoRepository {&#10;        val dao = if (context != null) {&#10;            try {&#10;                val db = AppRoomDataBase.getDatabase(context)&#10;                // Si la DB no expone perfilDuenoDao (por alguna razón), caemos al InMemory&#10;                db.perfilDuenoDao()&#10;            } catch (e: Exception) {&#10;                InMemoryPerfilDuenoDao()&#10;            }&#10;        } else {&#10;            InMemoryPerfilDuenoDao()&#10;        }&#10;&#10;        val local = PerfilDuenoLocalDataSource(dao)&#10;        val mapper = PerfilDuenoMapper()&#10;        return PerfilDuenoRepository(local, mapper)&#10;    }&#10;&#10;    fun provideObtenerPerfilUseCase(context: Context?) = ObtenerPerfilDuenoUseCase(provideRepository(context))&#10;    fun provideEliminarCuentaUseCase(context: Context?) = EliminarCuentaUseCase(provideRepository(context))&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/ucb/perritos/features/perfildueno/presentation/PerfilDuenoScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/ucb/perritos/features/perfildueno/presentation/PerfilDuenoScreen.kt" />
              <option name="originalContent" value="package com.ucb.perritos.features.perfildueno.presentation&#10;&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.ButtonDefaults&#10;import androidx.compose.material3.CircularProgressIndicator&#10;import androidx.compose.material3.OutlinedButton&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import com.ucb.perritos.R&#10;&#10;@Composable&#10;fun PerfilDuenoScreen(viewModel: PerfilDuenoViewModel) {&#10;    // Cargar perfil al iniciar&#10;    LaunchedEffect(Unit) { viewModel.cargarPerfil() }&#10;&#10;    val perfil by viewModel.perfil.collectAsState()&#10;    val loading by viewModel.loading.collectAsState()&#10;    val error by viewModel.error.collectAsState()&#10;&#10;    val accent = Color(0xFFFF9800)&#10;    // val grayText = Color(0xFF666666) // no usado por ahora&#10;    val cardBg = Color(0xFFF6F6F6)&#10;&#10;    Box(modifier = Modifier.fillMaxSize().padding(16.dp)) {&#10;        if (loading) {&#10;            CircularProgressIndicator(modifier = Modifier.align(Alignment.Center))&#10;            return@Box&#10;        }&#10;&#10;        error?.let {&#10;            Text(text = it, modifier = Modifier.align(Alignment.Center))&#10;            return@Box&#10;        }&#10;&#10;        Column(modifier = Modifier.fillMaxSize()) {&#10;            // Header: avatar + name&#10;            Row(verticalAlignment = Alignment.CenterVertically) {&#10;                Image(&#10;                    painter = painterResource(id = R.drawable.ic_launcher_foreground),&#10;                    contentDescription = null,&#10;                    modifier = Modifier&#10;                        .size(92.dp)&#10;                        .clip(CircleShape),&#10;                    contentScale = ContentScale.Crop&#10;                )&#10;&#10;                Spacer(modifier = Modifier.width(16.dp))&#10;&#10;                Column(modifier = Modifier.weight(1f)) {&#10;                    Text(&#10;                        text = perfil?.nombre ?: &quot;Pedro Dueño&quot;,&#10;                        fontSize = 20.sp,&#10;                        fontWeight = FontWeight.Bold,&#10;                        color = accent,&#10;                        maxLines = 1,&#10;                        overflow = TextOverflow.Ellipsis&#10;                    )&#10;                    Spacer(modifier = Modifier.height(4.dp))&#10;                    Text(text = &quot;Coocker&quot;, fontSize = 13.sp, color = Color(0xFF4A90E2))&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(20.dp))&#10;&#10;            // Section header&#10;            SectionHeader(title = &quot;Información de usuario&quot;, accent = accent)&#10;&#10;            Spacer(modifier = Modifier.height(12.dp))&#10;&#10;            // Card with info rows&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .background(cardBg, RoundedCornerShape(10.dp))&#10;                    .padding(16.dp)&#10;            ) {&#10;                InfoRow(&#10;                    icon = &quot;✉️&quot;,&#10;                    label = &quot;Email:&quot;,&#10;                    value = perfil?.email ?: &quot;prueba@gmail.com&quot;,&#10;                    tint = accent&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(12.dp))&#10;&#10;                InfoRow(&#10;                    icon = &quot;&quot;,&#10;                    label = &quot;Nombre del dueño&quot;,&#10;                    value = perfil?.nombre ?: &quot;Pedro Dueño&quot;,&#10;                    tint = accent&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(12.dp))&#10;&#10;                InfoRow(&#10;                    icon = &quot;&quot;,&#10;                    label = &quot;ID GPS&quot;,&#10;                    value = perfil?.id ?: &quot;20&quot;,&#10;                    tint = accent&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(20.dp))&#10;&#10;                Row(modifier = Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.SpaceBetween) {&#10;                    Button(&#10;                        onClick = { /* TODO: actualizar */ },&#10;                        modifier = Modifier&#10;                            .weight(1f)&#10;                            .height(48.dp),&#10;                        colors = ButtonDefaults.buttonColors(containerColor = accent)&#10;                    ) {&#10;                        Text(text = &quot;Actualizar datos&quot;, color = Color.White)&#10;                    }&#10;&#10;                    Spacer(modifier = Modifier.width(12.dp))&#10;&#10;                    OutlinedButton(&#10;                        onClick = { /* TODO: eliminar */ },&#10;                        modifier = Modifier&#10;                            .weight(1f)&#10;                            .height(48.dp),&#10;                        shape = RoundedCornerShape(8.dp),&#10;                        // outline color not directly available without colors param, keep default&#10;&#10;                    ) {&#10;                        Text(text = &quot;Eliminar cuenta&quot;, color = accent)&#10;                    }&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.weight(1f))&#10;&#10;            // Bottom spacing for nav bar&#10;            Spacer(modifier = Modifier.height(80.dp))&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun SectionHeader(title: String, accent: Color) {&#10;    Row(verticalAlignment = Alignment.CenterVertically) {&#10;        Box(&#10;            modifier = Modifier&#10;                .size(36.dp)&#10;                .background(accent.copy(alpha = 0.12f), shape = CircleShape),&#10;            contentAlignment = Alignment.Center&#10;        ) {&#10;            Text(text = &quot;i&quot;, color = accent, fontWeight = FontWeight.Bold)&#10;        }&#10;&#10;        Spacer(modifier = Modifier.width(12.dp))&#10;&#10;        Box(&#10;            modifier = Modifier&#10;                .height(36.dp)&#10;                .fillMaxWidth()&#10;                .background(Color(0xFFF3F3F3), shape = RoundedCornerShape(8.dp)),&#10;            contentAlignment = Alignment.CenterStart&#10;        ) {&#10;            Text(text = title, modifier = Modifier.padding(start = 16.dp), fontWeight = FontWeight.SemiBold, color = accent)&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun InfoRow(icon: String, label: String, value: String, tint: Color) {&#10;    Row(modifier = Modifier.fillMaxWidth(), verticalAlignment = Alignment.CenterVertically) {&#10;        Row(modifier = Modifier.weight(1f), verticalAlignment = Alignment.CenterVertically) {&#10;            Box(&#10;                modifier = Modifier&#10;                    .size(36.dp)&#10;                    .background(tint.copy(alpha = 0.12f), shape = CircleShape),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                Text(text = icon, color = tint)&#10;            }&#10;&#10;            Spacer(modifier = Modifier.width(8.dp))&#10;&#10;            Text(text = label, color = Color(0xFF666666))&#10;        }&#10;&#10;        Text(text = value, modifier = Modifier.weight(1f), textAlign = TextAlign.End)&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.ucb.perritos.features.perfildueno.presentation&#10;&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.ButtonDefaults&#10;import androidx.compose.material3.CircularProgressIndicator&#10;import androidx.compose.material3.OutlinedButton&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import com.ucb.perritos.R&#10;&#10;@Composable&#10;fun PerfilDuenoScreen(viewModel: PerfilDuenoViewModel, onAccountDeleted: () -&gt; Unit = {}) {&#10;    // Cargar perfil al iniciar&#10;    LaunchedEffect(Unit) { viewModel.cargarPerfil() }&#10;&#10;    val perfil by viewModel.perfil.collectAsState()&#10;    val loading by viewModel.loading.collectAsState()&#10;    val error by viewModel.error.collectAsState()&#10;&#10;    val accent = Color(0xFFFF9800)&#10;    // val grayText = Color(0xFF666666) // no usado por ahora&#10;    val cardBg = Color(0xFFF6F6F6)&#10;&#10;    Box(modifier = Modifier.fillMaxSize().padding(16.dp)) {&#10;        if (loading) {&#10;            CircularProgressIndicator(modifier = Modifier.align(Alignment.Center))&#10;            return@Box&#10;        }&#10;&#10;        error?.let {&#10;            Text(text = it, modifier = Modifier.align(Alignment.Center))&#10;            return@Box&#10;        }&#10;&#10;        Column(modifier = Modifier.fillMaxSize()) {&#10;            // Header: avatar + name&#10;            Row(verticalAlignment = Alignment.CenterVertically) {&#10;                Image(&#10;                    painter = painterResource(id = R.drawable.ic_launcher_foreground),&#10;                    contentDescription = null,&#10;                    modifier = Modifier&#10;                        .size(92.dp)&#10;                        .clip(CircleShape),&#10;                    contentScale = ContentScale.Crop&#10;                )&#10;&#10;                Spacer(modifier = Modifier.width(16.dp))&#10;&#10;                Column(modifier = Modifier.weight(1f)) {&#10;                    Text(&#10;                        text = perfil?.nombre ?: &quot;Pedro Dueño&quot;,&#10;                        fontSize = 20.sp,&#10;                        fontWeight = FontWeight.Bold,&#10;                        color = accent,&#10;                        maxLines = 1,&#10;                        overflow = TextOverflow.Ellipsis&#10;                    )&#10;                    Spacer(modifier = Modifier.height(4.dp))&#10;                    Text(text = &quot;Coocker&quot;, fontSize = 13.sp, color = Color(0xFF4A90E2))&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(20.dp))&#10;&#10;            // Section header&#10;            SectionHeader(title = &quot;Información de usuario&quot;, accent = accent)&#10;&#10;            Spacer(modifier = Modifier.height(12.dp))&#10;&#10;            // Card with info rows&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .background(cardBg, RoundedCornerShape(10.dp))&#10;                    .padding(16.dp)&#10;            ) {&#10;                InfoRow(&#10;                    icon = &quot;✉️&quot;,&#10;                    label = &quot;Email:&quot;,&#10;                    value = perfil?.email ?: &quot;prueba@gmail.com&quot;,&#10;                    tint = accent&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(12.dp))&#10;&#10;                InfoRow(&#10;                    icon = &quot;&quot;,&#10;                    label = &quot;Nombre del dueño&quot;,&#10;                    value = perfil?.nombre ?: &quot;Pedro Dueño&quot;,&#10;                    tint = accent&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(12.dp))&#10;&#10;                InfoRow(&#10;                    icon = &quot;&quot;,&#10;                    label = &quot;ID GPS&quot;,&#10;                    value = perfil?.id ?: &quot;20&quot;,&#10;                    tint = accent&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(20.dp))&#10;&#10;                Row(modifier = Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.SpaceBetween) {&#10;                    Button(&#10;                        onClick = { /* TODO: actualizar */ },&#10;                        modifier = Modifier&#10;                            .weight(1f)&#10;                            .height(48.dp),&#10;                        colors = ButtonDefaults.buttonColors(containerColor = accent)&#10;                    ) {&#10;                        Text(text = &quot;Actualizar datos&quot;, color = Color.White)&#10;                    }&#10;&#10;                    Spacer(modifier = Modifier.width(12.dp))&#10;&#10;                    OutlinedButton(&#10;                        onClick = {&#10;                            // Eliminar cuenta local y volver a pantalla de Login&#10;                            viewModel.eliminarCuenta {&#10;                                onAccountDeleted()&#10;                            }&#10;                        },&#10;                        modifier = Modifier&#10;                            .weight(1f)&#10;                            .height(48.dp),&#10;                        shape = RoundedCornerShape(8.dp),&#10;                        // outline color not directly available without colors param, keep default&#10;&#10;                    ) {&#10;                        Text(text = &quot;Eliminar cuenta&quot;, color = accent)&#10;                    }&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.weight(1f))&#10;&#10;            // Bottom spacing for nav bar&#10;            Spacer(modifier = Modifier.height(80.dp))&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun SectionHeader(title: String, accent: Color) {&#10;    Row(verticalAlignment = Alignment.CenterVertically) {&#10;        Box(&#10;            modifier = Modifier&#10;                .size(36.dp)&#10;                .background(accent.copy(alpha = 0.12f), shape = CircleShape),&#10;            contentAlignment = Alignment.Center&#10;        ) {&#10;            Text(text = &quot;i&quot;, color = accent, fontWeight = FontWeight.Bold)&#10;        }&#10;&#10;        Spacer(modifier = Modifier.width(12.dp))&#10;&#10;        Box(&#10;            modifier = Modifier&#10;                .height(36.dp)&#10;                .fillMaxWidth()&#10;                .background(Color(0xFFF3F3F3), shape = RoundedCornerShape(8.dp)),&#10;            contentAlignment = Alignment.CenterStart&#10;        ) {&#10;            Text(text = title, modifier = Modifier.padding(start = 16.dp), fontWeight = FontWeight.SemiBold, color = accent)&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun InfoRow(icon: String, label: String, value: String, tint: Color) {&#10;    Row(modifier = Modifier.fillMaxWidth(), verticalAlignment = Alignment.CenterVertically) {&#10;        Row(modifier = Modifier.weight(1f), verticalAlignment = Alignment.CenterVertically) {&#10;            Box(&#10;                modifier = Modifier&#10;                    .size(36.dp)&#10;                    .background(tint.copy(alpha = 0.12f), shape = CircleShape),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                Text(text = icon, color = tint)&#10;            }&#10;&#10;            Spacer(modifier = Modifier.width(8.dp))&#10;&#10;            Text(text = label, color = Color(0xFF666666))&#10;        }&#10;&#10;        Text(text = value, modifier = Modifier.weight(1f), textAlign = TextAlign.End)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/ucb/perritos/features/perfildueno/presentation/PerfilDuenoViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/ucb/perritos/features/perfildueno/presentation/PerfilDuenoViewModel.kt" />
              <option name="originalContent" value="package com.ucb.perritos.features.perfildueno.presentation&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.ucb.perritos.features.perfildueno.domain.model.PerfilDuenoModel&#10;import com.ucb.perritos.features.perfildueno.domain.usecase.ObtenerPerfilDuenoUseCase&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.launch&#10;&#10;class PerfilDuenoViewModel(private val obtenerPerfil: ObtenerPerfilDuenoUseCase) : ViewModel() {&#10;&#10;    private val _perfil = MutableStateFlow&lt;PerfilDuenoModel?&gt;(null)&#10;    val perfil: StateFlow&lt;PerfilDuenoModel?&gt; = _perfil&#10;&#10;    private val _loading = MutableStateFlow(false)&#10;    val loading: StateFlow&lt;Boolean&gt; = _loading&#10;&#10;    private val _error = MutableStateFlow&lt;String?&gt;(null)&#10;    val error: StateFlow&lt;String?&gt; = _error&#10;&#10;    fun cargarPerfil() {&#10;        viewModelScope.launch {&#10;            _loading.value = true&#10;            try {&#10;                val p = obtenerPerfil()&#10;                _perfil.value = p&#10;            } catch (e: Exception) {&#10;                _error.value = e.message&#10;            } finally {&#10;                _loading.value = false&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package com.ucb.perritos.features.perfildueno.presentation&#13;&#10;&#13;&#10;import androidx.lifecycle.ViewModel&#13;&#10;import androidx.lifecycle.viewModelScope&#13;&#10;import com.ucb.perritos.features.perfildueno.domain.model.PerfilDuenoModel&#13;&#10;import com.ucb.perritos.features.perfildueno.domain.usecase.ObtenerPerfilDuenoUseCase&#13;&#10;import com.ucb.perritos.features.perfildueno.domain.usecase.EliminarCuentaUseCase&#13;&#10;import kotlinx.coroutines.flow.MutableStateFlow&#13;&#10;import kotlinx.coroutines.flow.StateFlow&#13;&#10;import kotlinx.coroutines.launch&#13;&#10;&#13;&#10;class PerfilDuenoViewModel(private val obtenerPerfil: ObtenerPerfilDuenoUseCase,&#13;&#10;                           private val eliminarCuentaUseCase: EliminarCuentaUseCase&#13;&#10;) : ViewModel() {&#13;&#10;&#13;&#10;    private val _perfil = MutableStateFlow&lt;PerfilDuenoModel?&gt;(null)&#13;&#10;    val perfil: StateFlow&lt;PerfilDuenoModel?&gt; = _perfil&#13;&#10;&#13;&#10;    private val _loading = MutableStateFlow(false)&#13;&#10;    val loading: StateFlow&lt;Boolean&gt; = _loading&#13;&#10;&#13;&#10;    private val _error = MutableStateFlow&lt;String?&gt;(null)&#13;&#10;    val error: StateFlow&lt;String?&gt; = _error&#13;&#10;&#13;&#10;    fun cargarPerfil() {&#13;&#10;        viewModelScope.launch {&#13;&#10;            _loading.value = true&#13;&#10;            try {&#13;&#10;                val p = obtenerPerfil()&#13;&#10;                _perfil.value = p&#13;&#10;            } catch (e: Exception) {&#13;&#10;                _error.value = e.message&#13;&#10;            } finally {&#13;&#10;                _loading.value = false&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    fun eliminarCuenta(onDeleted: () -&gt; Unit = {}) {&#13;&#10;        viewModelScope.launch {&#13;&#10;            _loading.value = true&#13;&#10;            try {&#13;&#10;                eliminarCuentaUseCase()&#13;&#10;                // Clear perfil in state&#13;&#10;                _perfil.value = null&#13;&#10;                onDeleted()&#13;&#10;            } catch (e: Exception) {&#13;&#10;                _error.value = e.message&#13;&#10;            } finally {&#13;&#10;                _loading.value = false&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>